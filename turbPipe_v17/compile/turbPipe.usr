c      parameters
cc fixed
#define PI (4.*atan(1.))
cc to be set by user (optional: for computing the wall shear stress at each time step)
#define RAD  1.0        !pipe radius
#define ZLENPIPE  6.0   !pipe length

c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)
      return
      end

!      subroutine userf  (ix,iy,iz,ieg)
!      return
!      end

c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end


      subroutine userq  (ix,iy,iz,ieg)
      return
      end
!--------------------------------------------------
      subroutine userchk
      !implicit none  

      include 'SIZE'
      include 'GEOM'                    ! xm1, ym1, zm1
      include 'SOLN'                    ! T
      include 'MASS'                    !BM1 for lambda2
      include 'TSTEP'                   ! ISTEP
      include 'INPUT'           ! PARAM(12) (DT)
      include 'CHKPOINT'
      include 'USERPAR'

!for computing tau_wall on the fly
      !include 'TOTAL'
      real ffx_new,ffy_new,ffz_new  
      common /cforce/ ffx_new,ffy_new,ffz_new
c   for torque calculations
      real x0(3)
      save x0
      common /ctorq/ dragx(0:maxobj),dragpx(0:maxobj),dragvx(0:maxobj)
     $             , dragy(0:maxobj),dragpy(0:maxobj),dragvy(0:maxobj)
     $             , dragz(0:maxobj),dragpz(0:maxobj),dragvz(0:maxobj)
c
     $             , torqx(0:maxobj),torqpx(0:maxobj),torqvx(0:maxobj)
     $             , torqy(0:maxobj),torqpy(0:maxobj),torqvy(0:maxobj)
     $             , torqz(0:maxobj),torqpz(0:maxobj),torqvz(0:maxobj)
c
     $             , dpdx_mean,dpdy_mean,dpdz_mean
     $             , dgtq(3,4)

      real e2
      integer n

!-------------------------------------------------- 
c      ! Restart code
      if (ISTEP.eq.0) then
         CHKPTSTEP=uparam(4)
         if (uparam(3).eq.1) then
            IFCHKPTRST=.TRUE.
         else
            IFCHKPTRST=.FALSE.
         endif
      endif
            
      call checkpoint           ! Restart check

!--------------------------------------------------
      ! Stats code
      call stat_avg

      n=nx1*ny1*nz1*nelv

!compute tau_wall averaged over the wall
cc
      if (istep.eq.0) then
         call set_obj                   ! objects for surface integrals
         call rzero(x0,3)               ! define x0=0, note: torque w.r.t. x0
      endif

      call torque_calc(1.0,x0,.false.,.false.) ! wall shear

      wall_area= ZLENPIPE*RAD
      wall_area=2.*PI*wall_area

      tauw=0.5*(dragz(0)+dragz(1))/wall_area   !wall shear stress 
      
      if (nid.eq.0) write(*,*) 'time, uTau: ',time,sqrt(tauw)
cc
      return
      end
!--------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)

      !implicit none
      integer ix,iy,iz,iside,eg,e
      include 'SIZE' 
      include 'PARALLEL'  ! GLLEL
      include 'NEKUSE'

      ux= 0.0 
      uy= 0.0 
      uz= 0.0 

      temp = 0.0

      return
      end
      
!--------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)

      implicit none

      integer ix,iy,iz,ieg
      integer meanProfType   

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      real C, k, kx, kz,alpha,beta,cons,eps,Ri,rR,xL1,zL1
      real rp,ReTau 

c     Define the initial mean profile
      meanProfType=1;   !1: parabolic velocity profile
                        !2: Reichardt law at a given ReTau

c     Parabolic profile ub=1.0
      if (meanProfType.eq.1) then
         r   = sqrt(y*y+x*x)
         Ri   = 1.0      !pipe radius
         rR   = (r*r)/(Ri*Ri)
         cons = 2.0 
         uz   = cons*(1-rR)
      else
c        Reichardt function   
         ReTau = 360.0
         C      = 5.17
         k      = 0.41

         r   = sqrt(y*y+x*x)
         rp = (1.0-r)*ReTau
         uz  = 1/k*log(1+k*rp) + (C - (1/k)*log(k)) *
     $      (1 - exp(-rp/11.0) - rp/11.0*exp(-rp/3))
         uz  = uz * ReTau*param(2)
      endif

c     perturb
      eps = 2e-2
      kz  = 23
      kx  = 13
	
      xL1=(2.0*PI)
      zL1=PI
      alpha = kz * 2*PI/zL1
      beta  = kx * 2*PI/xL1

      uz  = uz  + eps*beta  * sin(alpha*z)*cos(beta*x) 
      uy  =       eps       * sin(alpha*z)*sin(beta*x)
      ux  =      -eps*alpha * cos(alpha*z)*sin(beta*x)

      temp=0
      
      return
      end
!--------------------------------------------------
      subroutine usrdat
      return
      end
!--------------------------------------------------
      subroutine usrdat2
      !implicit none

      include 'SIZE'
      include 'TOTAL'

      ! To set up forcing in z-direction
      param(54) = -3 !main flow direction: z-direction
      param(55) = 1  !Ubar

      !Set all non-periodic BCs here. This is required due to generating mesh by gmsh and converting it by gmsh2nek
      do iel=1,nelv
         do ifc=1,2*ndim
            id_face = bc(5,ifc,iel,1)
            if (id_face.eq.3) then    ! wall
               cbc(ifc,iel,1) = 'W  '
            endif
         enddo
      enddo
      
      return
      end


!--------------------------------------------------
      subroutine usrdat3
c      implicit none


 
      return
      end

c-----------------------------------------------------------------------
      subroutine set_obj  ! define objects for surface integrals
c
      include 'SIZE'
      include 'TOTAL'
c
      integer e,f
c
c     Define new objects
c
      nobj = 2                  ! for Periodic
      iobj = 0
      do ii=nhis+1,nhis+nobj
         iobj = iobj+1
         hcode(10,ii) = 'I'
         hcode( 1,ii) = 'F' ! 'F'
         hcode( 2,ii) = 'F' ! 'F'
         hcode( 3,ii) = 'F' ! 'F'
         lochis(1,ii) = iobj
      enddo
      nhis = nhis + nobj
c
      if (maxobj.lt.nobj) write(6,*) 'increase maxobj in SIZEu. rm *.o'
      if (maxobj.lt.nobj) call exitt
c
      nxyz = nx1*ny1*nz1
      do e=1,nelv
      do f=1,2*ndim
         if (cbc(f,e,1).eq.'W  ') then
            iobj=1   !wall
            if (iobj.gt.0) then
               nmember(iobj) = nmember(iobj) + 1
               mem = nmember(iobj)
               ieg = lglel(e)
               object(iobj,mem,1) = ieg
               object(iobj,mem,2) = f
c              write(6,1) iobj,mem,f,ieg,e,nid,' OBJ'
    1          format(6i9,a4)
            endif
c
         endif
      enddo
      enddo
c     write(6,*) 'number',(nmember(k),k=1,4)
c
      return
      end


